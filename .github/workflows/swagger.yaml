openapi: 3.0.3
info:
  title: CargoHUB API
  description: API voor het beheren van klanten, orders, inventaris, locaties, zendingen, en transfers binnen CargoHUB.
  version: 1.0.0
servers:
  - url: https://localhost:5072/cargohub
    description: Productieomgeving
  - url: https://sandbox.api.cargohub.com
    description: Sandbox omgeving

paths:
  /clients/{client_id}:
    get:
      summary: Haal een specifieke klant op
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID van de klant
          schema:
            type: string
      responses:
        '200':
          description: Klant gevonden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Klant niet gevonden
    put:
      summary: Werk een specifieke klant bij
      operationId: updateClient
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID van de klant
          schema:
            type: string
      requestBody:
        description: Klantgegevens om bij te werken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Klant bijgewerkt
        '404':
          description: Klant niet gevonden
    delete:
      summary: Verwijder een specifieke klant
      operationId: deleteClient
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID van de klant
          schema:
            type: string
      responses:
        '204':
          description: Klant verwijderd
        '404':
          description: Klant niet gevonden

  /clients:
    get:
      summary: Haal alle klanten op
      description: Haalt een lijst van alle klanten op
      operationId: readClients
      responses:
        '200':
          description: Klanten gevonden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '404':
          description: Geen klanten gevonden
    
    post:
      summary: Voeg een nieuwe klant bij
      operationId: postClient
      requestBody:
        description: Voegt een nieuwe klant toe aan de database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      responses:
        '200':
          description: Klant toegevoegd
          content:
            application/json:
              schema:
                type: string
                example: Klant toegevoegd
        '400':
          description: Klant niet kunnen toevoegen
          content:
            application/json:
              schema:
                type: string
                example: Klant niet kunnen toevoegen

  /clients/{client_id}/orders:
    get:
      summary: Haalt alle orders van een client op
      description: Haalt een lijst op van alle orders van een client
      operationId: readClientOrders
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID van de klant om orders op te halen
          schema:
            type: integer
      responses:
        '200':
          description: Klant met orders gevonden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Geen klant met orders gevonden

  /inventories/{inventory_id}:
    get:
      summary: Read an inventory by ID
      parameters:
        - name: inventory_id
          in: path
          required: true
          description: The ID of the inventory to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Inventory found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '404':
          description: Inventory not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such inventory with Id: {inventory_id}"

    put:
      summary: Update an existing inventory
      parameters:
        - name: inventory_id
          in: path
          required: true
          description: The ID of the inventory to update
          schema:
            type: integer
      requestBody:
        description: Inventory object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Inventory updated successfully."
        '400':
          description: Failed to update inventory
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update inventory."

    delete:
      summary: Delete an inventory by ID
      parameters:
        - name: inventory_id
          in: path
          required: true
          description: The ID of the inventory to delete
          schema:
            type: integer
      responses:
        '200':
          description: Inventory deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Inventory deleted successfully."
        '400':
          description: Failed to delete inventory
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete inventory."

  /inventories:
    get:
      summary: Retrieve all inventories
      responses:
        '200':
          description: Inventories found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        '404':
          description: No inventories found
          content:
            text/plain:
              schema:
                type: string
                example: "No inventories found"
    post:
      summary: Create a new inventory
      requestBody:
        description: Inventory object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Inventory created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Inventory created successfully."
        '400':
          description: Failed to create inventory
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create inventory."

  /item_groups/{item_group_id}:
    get:
      summary: Read an item group by ID
      parameters:
        - name: item_group_id
          in: path
          required: true
          description: The ID of the item group to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Item group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item_Group'
        '404':
          description: Item group not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such item_group with Id: {item_group_id}"

    put:
      summary: Update an existing item group
      parameters:
        - name: item_group_id
          in: path
          required: true
          description: The ID of the item group to update
          schema:
            type: integer
      requestBody:
        description: Item group object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Group'
      responses:
        '200':
          description: Item group updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_group updated successfully."
        '400':
          description: Failed to update item group
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update item_group."

    delete:
      summary: Delete an item group by ID
      parameters:
        - name: item_group_id
          in: path
          required: true
          description: The ID of the item group to delete
          schema:
            type: integer
      responses:
        '200':
          description: Item group deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_group deleted successfully."
        '400':
          description: Failed to delete item group
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete item_group."

  /item_groups:
    get:
      summary: Retrieve all item groups
      responses:
        '200':
          description: Item groups found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item_Group'
        '404':
          description: No item groups found
          content:
            text/plain:
              schema:
                type: string
                example: "No item_groups found"

    post:
      summary: Create a new item group
      requestBody:
        description: Item group object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Group'
      responses:
        '200':
          description: Item group created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_group created successfully."
        '400':
          description: Failed to create item group
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create item_group."

  /item_groups/{item_group_id}/items:
    get:
      summary: Read all items for a specific item group
      parameters:
        - name: item_group_id
          in: path
          required: true
          description: The ID of the item group whose items are to be retrieved
          schema:
            type: integer
      responses:
        '200':
          description: Items found for the specified item group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: No items found for the item group
          content:
            text/plain:
              schema:
                type: string
                example: "No items found for item_group with Id: {item_group_id}"

  /item_lines/{item_line_id}:
    get:
      summary: Read an item line by ID
      parameters:
        - name: item_line_id
          in: path
          required: true
          description: The ID of the item line to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Item line found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item_Line'
        '404':
          description: Item line not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such item_line with Id: {item_line_id}"

    put:
      summary: Update an existing item line
      parameters:
        - name: item_line_id
          in: path
          required: true
          description: The ID of the item line to update
          schema:
            type: integer
      requestBody:
        description: Item line object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Line'
      responses:
        '200':
          description: Item line updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_line updated successfully."
        '400':
          description: Failed to update item line
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update item_line."

    delete:
      summary: Delete an item line by ID
      parameters:
        - name: item_line_id
          in: path
          required: true
          description: The ID of the item line to delete
          schema:
            type: integer
      responses:
        '200':
          description: Item line deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_line deleted successfully."
        '400':
          description: Failed to delete item line
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete item_line."

  /item_lines:
    get:
      summary: Retrieve all item lines
      responses:
        '200':
          description: Item lines found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item_Line'
        '404':
          description: No item lines found
          content:
            text/plain:
              schema:
                type: string
                example: "No item_lines found"

    post:
      summary: Create a new item line
      requestBody:
        description: Item line object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Line'
      responses:
        '200':
          description: Item line created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_line created successfully."
        '400':
          description: Failed to create item line
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create item_line."

  /item_lines/{item_line_id}/items:
    get:
      summary: Read all items for a specific item line
      parameters:
        - name: item_line_id
          in: path
          required: true
          description: The ID of the item line whose items are to be retrieved
          schema:
            type: integer
      responses:
        '200':
          description: Items found for the specified item line
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: No items found for the item line
          content:
            text/plain:
              schema:
                type: string
                example: "No items found for item_line with Id: {item_line_id}"

  /item_types/{item_type_id}:
    get:
      summary: Read an item type by ID
      parameters:
        - name: item_type_id
          in: path
          required: true
          description: The ID of the item type to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Item type found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item_Type'
        '404':
          description: Item type not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such item_type with Id: {item_type_id}"

    put:
      summary: Update an existing item type
      parameters:
        - name: item_type_id
          in: path
          required: true
          description: The ID of the item type to update
          schema:
            type: integer
      requestBody:
        description: Item type object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Type'
      responses:
        '200':
          description: Item type updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_type updated successfully."
        '400':
          description: Failed to update item type
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update item_type."

    delete:
      summary: Delete an item type by ID
      parameters:
        - name: item_type_id
          in: path
          required: true
          description: The ID of the item type to delete
          schema:
            type: integer
      responses:
        '200':
          description: Item type deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_type deleted successfully."
        '400':
          description: Failed to delete item type
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete item_type."

  /item_types:
    get:
      summary: Retrieve all item types
      responses:
        '200':
          description: Item types found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item_Type'
        '404':
          description: No item types found
          content:
            text/plain:
              schema:
                type: string
                example: "No item_types found"

    post:
      summary: Create a new item type
      requestBody:
        description: Item type object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item_Type'
      responses:
        '200':
          description: Item type created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item_type created successfully."
        '400':
          description: Failed to create item type
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create item_type."

  /item_types/{item_type_id}/items:
    get:
      summary: Read all items for a specific item type
      parameters:
        - name: item_type_id
          in: path
          required: true
          description: The ID of the item type whose items are to be retrieved
          schema:
            type: integer
      responses:
        '200':
          description: Items found for the specified item type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: No items found for the item type
          content:
            text/plain:
              schema:
                type: string
                example: "No items found for item_type with Id: {item_type_id}"

  /items/{item_id}:
    get:
      summary: Get an item by ID
      parameters:
        - name: item_id
          in: path
          required: true
          description: The ID of the item to retrieve.
          schema:
            type: string
      responses:
        200:
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: Item not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such item with Id: {item_id}"
    put:
      summary: Update an item by ID
      parameters:
        - name: item_id
          in: path
          required: true
          description: The ID of the item to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        200:
          description: Item updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item updated successfully."
        400:
          description: Failed to update item
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update item."
    delete:
      summary: Delete an item by ID
      parameters:
        - name: item_id
          in: path
          required: true
          description: The ID of the item to delete.
          schema:
            type: string
      responses:
        200:
          description: Item deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item deleted successfully."
        400:
          description: Failed to delete item
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete item."
          
  /items:
    get:
      summary: Get a list of all items
      responses:
        200:
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: No items found
          content:
            text/plain:
              schema:
                type: string
                example: "No items found"
    post:
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        200:
          description: Item created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Item created successfully."
        400:
          description: Failed to create item
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create item."
  
  /items/{item_id}/inventory:
    get:
      summary: Get inventories for a specific item
      parameters:
        - name: item_id
          in: path
          required: true
          description: The ID of the item to get inventories for.
          schema:
            type: string
      responses:
        200:
          description: Inventories found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        404:
          description: No inventories found for item
          content:
            text/plain:
              schema:
                type: string
                example: "No inventories found for item with Id: {item_id}"
  
  /items/{item_id}/inventory/totals:
    get:
      summary: Get total inventory for a specific item
      parameters:
        - name: item_id
          in: path
          required: true
          description: The ID of the item to get inventory totals for.
          schema:
            type: string
      responses:
        200:
          description: Inventory totals found
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
        404:
          description: Item not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such item with Id: {item_id}"

  /locations/{location_id}:
    get:
      summary: Get a location by ID
      parameters:
        - name: location_id
          in: path
          required: true
          description: The ID of the location to retrieve.
          schema:
            type: integer
      responses:
        200:
          description: Location found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        404:
          description: Location not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such location with Id: {location_id}"
    put:
      summary: Update a location by ID
      parameters:
        - name: location_id
          in: path
          required: true
          description: The ID of the location to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        200:
          description: Location updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Location updated successfully."
        400:
          description: Failed to update location
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update location."
    delete:
      summary: Delete a location by ID
      parameters:
        - name: location_id
          in: path
          required: true
          description: The ID of the location to delete.
          schema:
            type: integer
      responses:
        200:
          description: Location deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Location deleted successfully."
        400:
          description: Failed to delete location
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete location."
          
  /locations:
    get:
      summary: Get a list of all locations
      responses:
        200:
          description: A list of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        404:
          description: No locations found
          content:
            text/plain:
              schema:
                type: string
                example: "No locations found"
    post:
      summary: Create a new location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        200:
          description: Location created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Location created successfully."
        400:
          description: Failed to create location
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create location."

  /orders/{order_id}:
    get:
      summary: Get an order by ID
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to retrieve.
          schema:
            type: integer
      responses:
        200:
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such order with Id: {order_id}"
    put:
      summary: Update an order by ID
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Order updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Order updated successfully."
        400:
          description: Failed to update order
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update order."
    delete:
      summary: Delete an order by ID
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to delete.
          schema:
            type: integer
      responses:
        200:
          description: Order deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Order deleted successfully."
        400:
          description: Failed to delete order
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to delete order."
  
  /orders:
    get:
      summary: Get a list of all orders
      responses:
        200:
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: No orders found
          content:
            text/plain:
              schema:
                type: string
                example: "No orders found"
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Order created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Order created successfully."
        400:
          description: Failed to create order
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create order."

  /orders/{order_id}/items:
    get:
      summary: Get all items in an order
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to retrieve items for.
          schema:
            type: integer
      responses:
        200:
          description: Items found in order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: No items found in the order
          content:
            text/plain:
              schema:
                type: string
                example: "No items found in order with Id: {order_id}"
    put:
      summary: Update items in an order
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to update items in.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PropertyItem'
      responses:
        200:
          description: Items in the order updated successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Items in order updated successfully."
        400:
          description: Failed to update items in order
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to update items in order."

  /shipments/{shipment_id}:
    get:
      summary: Get shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to retrieve.
      responses:
        '200':
          description: Shipment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '404':
          description: Shipment not found
    put:
      summary: Update shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment updated successfully
        '400':
          description: Failed to update shipment
    delete:
      summary: Delete shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to delete.
      responses:
        '200':
          description: Shipment deleted successfully
        '400':
          description: Failed to delete shipment

  /shipments:
    get:
      summary: Get all shipments with pagination
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number for pagination.
      responses:
        '200':
          description: List of shipments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
        '400':
          description: Invalid page parameter
    post:
      summary: Create a new shipment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment created successfully
        '400':
          description: Failed to create shipment

  /shipments/{shipment_id}/items:
    get:
      summary: Get items of a shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to retrieve items for.
      responses:
        '200':
          description: Items of the shipment found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyItem'
        '404':
          description: No items found or shipment not found
    put:
      summary: Update items of a shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to update items for.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PropertyItem'
      responses:
        '200':
          description: Shipment items updated successfully
        '400':
          description: Failed to update shipment items

  /shipments/{shipment_id}/orders:
    get:
      summary: Get orders of a shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to retrieve orders for.
      responses:
        '200':
          description: Orders of the shipment found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Orders not found or shipment not found
    put:
      summary: Update orders of a shipment by ID
      parameters:
        - in: path
          name: shipment_id
          required: true
          schema:
            type: integer
          description: The ID of the shipment to update orders for.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Shipment orders updated successfully
        '400':
          description: Failed to update shipment orders

  /suppliers/{supplier_id}:
    get:
      summary: Get supplier by ID
      parameters:
        - in: path
          name: supplier_id
          required: true
          schema:
            type: integer
          description: The ID of the supplier to retrieve.
      responses:
        '200':
          description: Supplier found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '404':
          description: Supplier not found
    put:
      summary: Update supplier by ID
      parameters:
        - in: path
          name: supplier_id
          required: true
          schema:
            type: integer
          description: The ID of the supplier to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Supplier updated successfully
        '400':
          description: Failed to update supplier
    delete:
      summary: Delete supplier by ID
      parameters:
        - in: path
          name: supplier_id
          required: true
          schema:
            type: integer
          description: The ID of the supplier to delete.
      responses:
        '200':
          description: Supplier deleted successfully
        '400':
          description: Failed to delete supplier

  /suppliers:
    get:
      summary: Get all suppliers
      responses:
        '200':
          description: List of suppliers found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'
        '404':
          description: No suppliers found
    post:
      summary: Create a new supplier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Supplier created successfully
        '400':
          description: Failed to create supplier

  /suppliers/{supplier_id}/items:
    get:
      summary: Get items for a specific supplier by ID
      parameters:
        - in: path
          name: supplier_id
          required: true
          schema:
            type: integer
          description: The ID of the supplier to retrieve items for.
      responses:
        '200':
          description: Items for the supplier found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: No items found for the supplier or supplier not found

  /transfers/{transfer_id}:
    get:
      summary: Get transfer by ID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: integer
          description: The ID of the transfer to retrieve.
      responses:
        '200':
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '404':
          description: Transfer not found
    put:
      summary: Update transfer by ID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: integer
          description: The ID of the transfer to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        '200':
          description: Transfer updated successfully
        '400':
          description: Failed to update transfer
    delete:
      summary: Delete transfer by ID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: integer
          description: The ID of the transfer to delete.
      responses:
        '200':
          description: Transfer deleted successfully
        '400':
          description: Failed to delete transfer

  /transfers:
    get:
      summary: Get all transfers
      responses:
        '200':
          description: List of transfers found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'
        '404':
          description: No transfers found
    post:
      summary: Create a new transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        '200':
          description: Transfer created successfully
        '400':
          description: Failed to create transfer

  /transfers/{transfer_id}/items:
    get:
      summary: Get items for a specific transfer by ID
      parameters:
        - in: path
          name: transfer_id
          required: true
          schema:
            type: integer
          description: The ID of the transfer to retrieve items for.
      responses:
        '200':
          description: Items for the transfer found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: No items found for the transfer or transfer not found

  /warehouses/{warehouse_id}:
    get:
      summary: Get warehouse by ID
      parameters:
        - in: path
          name: warehouse_id
          required: true
          schema:
            type: integer
          description: The ID of the warehouse to retrieve.
      responses:
        '200':
          description: Warehouse found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'
        '404':
          description: Warehouse not found
    put:
      summary: Update warehouse by ID
      parameters:
        - in: path
          name: warehouse_id
          required: true
          schema:
            type: integer
          description: The ID of the warehouse to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          description: Warehouse updated successfully
        '400':
          description: Failed to update warehouse
    delete:
      summary: Delete warehouse by ID
      parameters:
        - in: path
          name: warehouse_id
          required: true
          schema:
            type: integer
          description: The ID of the warehouse to delete.
      responses:
        '200':
          description: Warehouse deleted successfully
        '400':
          description: Failed to delete warehouse

  /warehouses:
    get:
      summary: Get all warehouses
      responses:
        '200':
          description: List of warehouses found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Warehouse'
        '404':
          description: No warehouses found
    post:
      summary: Create a new warehouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          description: Warehouse created successfully
        '400':
          description: Failed to create warehouse

  /warehouses/{warehouse_id}/locations:
    get:
      summary: Get locations in a specific warehouse by ID
      parameters:
        - in: path
          name: warehouse_id
          required: true
          schema:
            type: integer
          description: The ID of the warehouse to retrieve locations for.
      responses:
        '200':
          description: Locations in the warehouse found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '404':
          description: No locations found for the warehouse or warehouse not found

components:
  schemas:
    Client:
      type: object
      properties:
        id:
          type: integer
          description: Unieke identificatie van de klant
        name:
          type: string
          description: Naam van de klant
        address:
          type: string
          description: Adres van de klant
        city:
          type: string
          description: Woonplaats van de klant
        zip_code:
          type: string
          description: Zip code van de klant
        province:
          type: string
          description: Provincie van de klant
        country:
          type: string
          description: Land van de klant
        contact_name:
          type: string
          description: Naam van de klant
        contact_phone:
          type: string
          description: Telefoonnummer van de klant
        contact_email:
          type: string
          format: email
          description: Email adres van de klant
        email:
          type: string
          format: email
          description: E-mailadres van de klant
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Inventory:
      type: object
      properties:
        id:
          type: integer
          description: Unieke identificatie van het inventaris
        item_id:
          type: string
          description: Item identificatie
        description:
          type: string
          description: Beschrijving van het item
        item_reference:
          type: string
          description: Referentie van het item
        locations:
          type: array
          items:
            type: integer
          description: Lijst van locaties
        total_on_hand:
          type: integer
          description: Aantal op voorraad
        total_expected:
          type: integer
          description: Aantal verwachte items
        total_ordered:
          type: integer
          description: Aantal bestelde items
        total_allocated:
          type: integer
          description: Aantal toegewezen items
        total_available:
          type: integer
          description: Aantal beschikbare items
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Item_Group:
      type: object
      properties:
        id:
          type: integer
          description: Unieke identificatie van de itemgroep
        name:
          type: string
          description: Naam van de itemgroep
        description:
          type: string
          description: Beschrijving van de itemgroep
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Item_Line:
      type: object
      properties:
        id:
          type: integer
          description: Unieke identificatie van de itemlijn
        name:
          type: string
          description: Naam van de itemlijn
        description:
          type: string
          description: Beschrijving van de itemlijn
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Item_Type:
      type: object
      properties:
        id:
          type: integer
          description: Unieke identificatie van het itemtype
        name:
          type: string
          description: Naam van het itemtype
        description:
          type: string
          description: Beschrijving van het itemtype
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Item:
      type: object
      properties:
        uid:
          type: string
          description: Unieke ID van het item
        code:
          type: string
          description: Code van het item
        description:
          type: string
          description: Beschrijving van het item
        short_description:
          type: string
          description: Korte beschrijving van het item
        upc_code:
          type: string
          description: UPC code van het item
        model_number:
          type: string
          description: Modelnummer van het item
        commodity_code:
          type: string
          description: Commoditeit code van het item
        item_line:
          type: integer
          description: Itemlijn ID
        item_group:
          type: integer
          description: Itemgroep ID
        item_type:
          type: integer
          description: Itemtype ID
        unit_purchase_quantity:
          type: integer
          description: Aantal per aankoop eenheid
        unit_order_quantity:
          type: integer
          description: Aantal per bestel eenheid
        pack_order_quantity:
          type: integer
          description: Aantal per pack bestel eenheid
        supplier_id:
          type: integer
          description: Leverancier ID
        supplier_code:
          type: string
          description: Leverancier code
        supplier_part_number:
          type: string
          description: Leverancier onderdeelnummer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Shipment:
      type: object
      properties:
        Id:
          type: integer
        Order_Id:
          type: integer
        Source_Id:
          type: integer
        Order_Date:
          type: string
          format: date
        Request_Date:
          type: string
          format: date
        Shipment_Date:
          type: string
          format: date
        Shipment_Type:
          type: string
        Shipment_Status:
          type: string
        Notes:
          type: string
        Carrier_Code:
          type: string
        Carrier_Description:
          type: string
        Service_Code:
          type: string
        Payment_Type:
          type: string
        Transfer_Mode:
          type: string
        Total_Package_Count:
          type: integer
        Total_Package_Weight:
          type: number
          format: float
        Created_At:
          type: string
          format: date-time
        Updated_At:
          type: string
          format: date-time
        Items:
          type: array
          items:
            $ref: '#/components/schemas/PropertyItem'

    Supplier:
      type: object
      properties:
        Id:
          type: integer
        Code:
          type: string
        Name:
          type: string
        Address:
          type: string
        Address_Extra:
          type: string
        City:
          type: string
        Zip_Code:
          type: string
        Province:
          type: string
        Country:
          type: string
        Contact_Name:
          type: string
        Phonenumber:
          type: string
        Reference:
          type: string
        Created_At:
          type: string
          format: date-time
        Updated_At:
          type: string
          format: date-time

    Location:
      type: object
      properties:
        id:
          type: integer
          description: Locatie ID
        warehouse_id:
          type: integer
          description: ID van het magazijn
        code:
          type: string
          description: Code van de locatie
        name:
          type: string
          description: Naam van de locatie
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: integer
          description: Order ID
        source_id:
          type: integer
          description: Bron ID
        order_date:
          type: string
          description: Datum van de bestelling
        request_date:
          type: string
          description: Verzoekdatum
        reference:
          type: string
          description: Referentie van de order
        reference_extra:
          type: string
          description: Extra referentie
        order_status:
          type: string
          description: Status van de bestelling
        notes:
          type: string
          description: Notities voor de bestelling
        shipping_notes:
          type: string
          description: Verzendnotities
        picking_notes:
          type: string
          description: Picking notities
        warehouse_id:
          type: integer
          description: Magazijn ID
        ship_to:
          type: integer
          description: Verzendadres ID
        bill_to:
          type: integer
          description: Factuuradres ID
        shipment_id:
          type: integer
          description: Zending ID
        total_amount:
          type: number
          format: float
          description: Totaalbedrag van de bestelling
        total_discount:
          type: number
          format: float
          description: Totale korting van de bestelling
        total_tax:
          type: number
          format: float
          description: Totale belasting van de bestelling
        total_surcharge:
          type: number
          format: float
          description: Totale toeslag van de bestelling
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: string
              quantity:
                type: integer

    Transfer:
      type: object
      properties:
        id:
          type: integer
          description: Transfer ID
        reference:
          type: string
          description: Transfer referentie
        transfer_from:
          type: integer
          description: Overdracht van locatie
        transfer_to:
          type: integer
          description: Overdracht naar locatie
        transfer_status:
          type: string
          description: Status van de transfer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: string
              quantity:
                type: integer

    Warehouse:
      type: object
      properties:
        id:
          type: integer
          description: Warehouse ID
        code:
          type: string
          description: Code van het magazijn
        name:
          type: string
          description: Naam van het magazijn
        address:
          type: string
          description: Adres van het magazijn
        zip:
          type: string
          description: Postcode van het magazijn
        city:
          type: string

    PropertyItem:
      type: object
      properties:
        id:
          type: string
          description: Item ID
        amount:
          type: integer
          description: Amount of items
